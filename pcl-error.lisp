(define-condition malformed-log-entry-error (error)
  ((text :initarg :text :reader text)))

(defun parse-log-entry (text)
  (if (well-formed-log-entry-p text)
    (format nil ":~A:" text)
    (error 'malformed-log-entry-error :text text)))

(defun well-formed-log-entry-p (text)
  (and (stringp text)
       (< 0 (length text))
       (< (length text) 10)))

(defun parse-log-file (file)
  (with-open-file (ifs file :direction :input)
    (let ((acc nil) (entry nil))
      (do ((text (read-line ifs nil :end-of-file)
                 (read-line ifs nil :end-of-file)))
        ((equal text :end-of-file)
         (nreverse acc))
        ;   (setf entry (handler-case (parse-log-entry text)
        ;             (malformed-log-entry-error () nil)))
        (setf entry (restart-case (parse-log-entry text)
                      (use-value (value) value)
                      (skip-log-entry () nil)))
        (when entry (push entry acc))))))

(defun log-analyzer ()
  (handler-bind ((malformed-log-entry-error
                   #'(lambda (c)
                       (invoke-restart 'skip-log-entry))))
    (analyze-log "poet")))

(defun analyze-log (log)
  (dolist (entry (parse-log-file log))
    (format t "[Legal Form] ~A~%" entry)))
